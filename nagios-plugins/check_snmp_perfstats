#!/usr/bin/perl
#
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
use strict;
use warnings;

use FindBin qw($Bin);
use lib "/opt/opsview/perl/lib/perl5", "$Bin/../lib";
use Net::SNMP;
use Opsview::NagiosPlugin::SNMP;

my $np = Opsview::NagiosPlugin::SNMP->new(
    usage     => "Usage: %s",
    shortname => "check_snmp_perfdata",
    version   => "2.1",
    blurb     => "Returns performance stats for Linux / Unix systems",
    snmp      => {
        "snmp-version" => 1,
        "snmp-timeout" => 2,
    },
);

$np->getopts;

my $s = $np->snmp;

my $oid_sysDescr    = ".1.3.6.1.2.1.1.1.0";
my $hrSysInterrupts = ".1.3.6.1.4.1.2021.11.7.0";
my $hrSysContext    = ".1.3.6.1.4.1.2021.11.8.0";
my $ssSwapIn        = ".1.3.6.1.4.1.2021.11.3.0";
my $ssSwapOut       = ".1.3.6.1.4.1.2021.11.4.0";
my $ssIOSent        = ".1.3.6.1.4.1.2021.11.5.0";
my $ssIORecieve     = ".1.3.6.1.4.1.2021.11.6.0";
my $ssCpuIdle       = ".1.3.6.1.4.1.2021.11.11.0";
my $memTotalReal    = ".1.3.6.1.4.1.2021.4.5.0";
my $memShared       = ".1.3.6.1.4.1.2021.4.13.0";
my $memBuffer       = ".1.3.6.1.4.1.2021.4.14.0";
my $memCached       = ".1.3.6.1.4.1.2021.4.15.0";
my $memSwapError    = ".1.3.6.1.4.1.2021.4.100.0";

my $status       = 0;
my $returnstring = "";

main();

# Close the session
$s->close();

if ( $returnstring eq "" ) {
    $status = 3;
}

if ( $status == 0 ) {
    print "Status is OK - $returnstring\n";

    # print "$returnstring\n";
}
elsif ( $status == 1 ) {
    print "Status is a WARNING level - $returnstring\n";
}
elsif ( $status == 2 ) {
    print "Status is CRITICAL - $returnstring\n";
}
else {
    print "Status is UNKNOWN\n";
}

exit $status;

sub main {

    my $interrupts;
    my $contextswitches;
    my $swapin;
    my $swapout;
    my $iosent;
    my $iorecieve;
    my $cpuidle;
    my $totalmem;
    my $sharedmem;
    my $buffermem;
    my $cachedmem;
    my $mtemp;
    my $cpuutil;
    my $sharedmempercent;
    my $buffermempercent;
    my $cachedmempercent;
    my $temp;
    my $swaperrors;

    # I/O

    if ( !defined( $s->get_request($hrSysInterrupts) ) ) {
        if ( ( !defined( $s->get_request($oid_sysDescr) ) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "hrSysInterrupts SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $interrupts = $s->var_bind_list()->{$_};

        #print "$interrupts\n";
    }
    if ( $interrupts eq 'noSuchObject' ) {
        $returnstring = "hrSysInterrupts SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    if (   ( !defined( $s->get_request($hrSysContext) ) )
        || ( $s->get_request($hrSysContext) == 0 ) )
    {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "hrSysContext SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $contextswitches = $s->var_bind_list()->{$_};

        #print "$contextswitches\n";
    }

    if ( $contextswitches eq 'noSuchObject' ) {
        $status       = 1;
        $returnstring = "hrSysContext SNMP OID does not exist";
        return 1;
    }

    if ( !defined( $s->get_request($ssSwapIn) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "ssSwapIn SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $swapin = $s->var_bind_list()->{$_};
    }

    if ( $swapin eq 'noSuchObject' ) {
        $returnstring = "ssSwapIn SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    if ( !defined( $s->get_request($ssSwapOut) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "ssSwapOut SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $swapout = $s->var_bind_list()->{$_};
    }

    if ( $swapout eq 'noSuchObject' ) {
        $returnstring = "ssSwapOut SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    if ( !defined( $s->get_request($ssIOSent) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "ssIOSent SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $iosent = $s->var_bind_list()->{$_};
    }

    if ( $iosent eq 'noSuchObject' ) {
        $returnstring = "ssIOSent SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    if ( !defined( $s->get_request($ssIORecieve) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "ssIORecieve SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $iorecieve = $s->var_bind_list()->{$_};
    }

    if ( $iorecieve eq 'noSuchObject' ) {
        $returnstring = "ssIORecieve SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    # CPU

    if ( !defined( $s->get_request($ssCpuIdle) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "ssCpuIdle SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $cpuidle = $s->var_bind_list()->{$_};

        #print "$cpuutil\n";
    }

    if ( $cpuidle eq 'noSuchObject' ) {
        $returnstring = "ssCpuIdle SNMP OID does not exist";
        $status       = 1;
        return 1;
    }
    $cpuutil = 100 - $cpuidle;

    #Memory

    if ( !defined( $s->get_request($memTotalReal) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "memTotalReal SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $totalmem = $s->var_bind_list()->{$_};

        #print "$totalmem\n";
    }

    if ( $totalmem eq 'noSuchObject' ) {
        $returnstring = "memTotalReal SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    if ( !defined( $s->get_request($memShared) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }

        # This section commented out as OID removed in SNMP 5.4.3
        #        else {
        #            $returnstring = "memShared SNMP OID does not exist";
        #            $status       = 1;
        #            return 1;
        #        }
    }
    foreach ( $s->var_bind_names() ) {
        $sharedmem = $s->var_bind_list()->{$_};

        #print "$sharedmem\n";
    }

    if ( $sharedmem eq 'noSuchObject' ) {
        $returnstring = "memShared SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    if ( !defined( $s->get_request($memBuffer) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "memBuffer SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $buffermem = $s->var_bind_list()->{$_};

        #print "buff $buffermem\n";
    }

    if ( $buffermem eq 'noSuchObject' ) {
        $returnstring = "memBuffer SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    if ( !defined( $s->get_request($memCached) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "memCached SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $cachedmem = $s->var_bind_list()->{$_};

        # print "$cachedmem\n";
    }

    if ( $cachedmem eq 'noSuchObject' ) {
        $returnstring = "memCached SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    $mtemp            = 100 / $totalmem;
    $sharedmempercent = $sharedmem * $mtemp;
    $buffermempercent = $buffermem * $mtemp;
    $cachedmempercent = $cachedmem * $mtemp;

    #Errors

    if ( !defined( $s->get_request($memSwapError) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "memSwapError SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $swaperrors = $s->var_bind_list()->{$_};
    }

    if ( $swaperrors eq 'noSuchObject' ) {
        $returnstring = "memSwapError SNMP OID does not exist";
        $status       = 1;
        return 1;
    }

    $temp =
      sprintf
      "STATS: (interrupts/sec: $interrupts), (context switches/sec: $contextswitches), (CPU -  util: $cpuutil), (MEMORY - shared %.0f pc, buffered %.0f pc, cached %.0f pc), (SWAP - in: $swapin (kb/s), out $swapout (kb/s), errors: $swaperrors), (I/O - send: $iosent, recieve: $iorecieve), ",
      $sharedmempercent, $buffermempercent, $cachedmempercent;
    append($temp);

    $status = 0;

}

sub append {
    my $appendstring = $_[0];
    $returnstring = "$returnstring$appendstring";
}

