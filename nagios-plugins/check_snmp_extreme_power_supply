#!/usr/bin/perl
#
#
# SYNTAX & DESCRIPTION:
#    Run script with '-h' to get help output
#
# AUTHORS:
# Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use strict;
use warnings;

use FindBin qw($Bin);
use lib "/opt/opsview/perl/lib/perl5", "$Bin/../lib";
use Net::SNMP;
use Opsview::NagiosPlugin::SNMP;

my $np = Opsview::NagiosPlugin::SNMP->new(
    usage     => "Usage: %s",
    shortname => "POWER",
    version   => "0.02",
    blurb     => "Monitor Extreme Power Supply power status",
    snmp      => {
        "snmp-version" => 1,
        "snmp-timeout" => 1,
    },
);

$np->getopts;

my $s = $np->snmp;

my $test_oid  = ".1.3.6.1.2.1.1.1.0";             # generic oid to test server
my $check     = "power";                          # what we are checking
my $check_oid = ".1.3.6.1.4.1.1916.1.1.1.27.1.2"; # oid to check

my $result = $s->get_table( -baseoid => $check_oid );

if ( !defined($result) ) {
    $np->nagios_exit( 3, "Agent not responding" );
}

if ( !scalar( keys(%$result) ) ) {
    $np->nagios_exit( 3, "OID does not exist" );
}

foreach my $row ( keys(%$result) ) {
    my ($unit) = $row =~ m/\.(\d+)$/;
    if ( $result->{$row} == 1 ) {
        print $np->shortname . " OK - Unit " . $unit . " not present;\n";
        exit(0);
    }
    elsif ( $result->{$row} == 2 ) {
        print $np->shortname . " OK - Unit " . $unit . " OK;\n";
        exit(0);
    }
    elsif ( $result->{$row} == 3 ) {
        print $np->shortname . " CRITICAL - Unit " . $unit . " failure;\n";
        exit(2);
    }
    else {
        print $np->shortname . " UNKNOWN - Unit " . $unit . " Unknown state;\n";
        exit(3);
    }
}

$np->nagios_exit( $np->check_messages, );
