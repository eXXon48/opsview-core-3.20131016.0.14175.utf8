#!/usr/bin/perl
#
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use warnings;

# TV: Cannot enable strict. There is some mad logic to calculate rollovers of uptime, but
# I can't see how this is supposed to work. Safest to leave it as it is
#use strict;
use FindBin qw($Bin);
use lib "/opt/opsview/perl/lib/perl5", "$Bin/../lib";
use Net::SNMP;
use Opsview::NagiosPlugin::SNMP;

my $np = Opsview::NagiosPlugin::SNMP->new(
    usage     => "Usage: %s",
    shortname => "UPTIME",
    version   => "4.0",
    blurb =>
      "Returns uptime of SNMP agent (usually equal to system uptime). Warning state if less than 1 hour",
    snmp => {
        "snmp-timeout" => 2,
        "v1-fallback"  => 1,
    },
);

$np->add_arg(
    'spec' => 'cascade|c',
    'help' =>
      "-c, --cascade\n   Cascade a critical alert to Uptime Restart service of --hosttitle host when an agent restart has been detected",
    'default' => ''
);

$np->add_arg(
    'spec' => 'hosttitle|T=s',
    'help' =>
      "-T --hosttitle HOSTTITLE\n   Host title used for cascaded results. Overrides -T (from --snmp-timeout)",
    'default' => ''
);

$np->getopts;

my $oid_sysDescr =
  ".1.3.6.1.2.1.1.1.0"; # Used to check whether SNMP is actually responding
my $oid_sysUpTime = ".1.3.6.1.2.1.1.3.0"; #

my $status       = 0;
my $returnstring = "";
my $prev_uptime  = 0;
my $timeticks    = 0;
my $days         = 0;

# Cache file name
my $hostname   = $np->opts->hostname;
my $statusfile = "/usr/local/nagios/var/uptime_$hostname.db";

my $s = $np->snmp;

main();

# Close the session
$s->close();

if ( $returnstring eq "" ) {
    $status = 3;
}

if ( $np->opts->cascade ) {
    if ( $np->opts->hosttitle eq '' ) {
        print "Status is WARNING - Host title required\n";
        exit 1;
    }
    elsif ( $prev_uptime > $timeticks ) {
        require Opsview::Externalcommand;
        my $cmd = Opsview::Externalcommand->new(
            command => 'PROCESS_SERVICE_CHECK_RESULT',
            args    => join( ';',
                $np->opts->hosttitle, 'Uptime Restart',
                '2', 'Uptime reset' ),
        );
        $cmd->send_to_master;
    }
    $np->nagios_exit( OK, $returnstring );
}

if ( $status == 0 ) {
    print "Status is OK - $returnstring\n";
}
elsif ( $status == 1 ) {
    print "Status is a WARNING level - $returnstring\n";
}
elsif ( $status == 2 ) {
    print "Status is CRITICAL - $returnstring\n";
}
else {
    print "Plugin error! SNMP status unknown\n";
}

exit $status;

sub main {

    if ( !defined( $s->get_request($oid_sysUpTime) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    my $uptime;
    foreach ( $s->var_bind_names() ) {
        $uptime = $s->var_bind_list()->{$_};
    }

    # Call again to get uptime in timeticks
    $s->translate( [ '-timeticks' => 0 ] );
    if ( !defined( $s->get_request($oid_sysUpTime) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $timeticks = $s->var_bind_list()->{$_};
    }

    #Â Convert to days
    $days = sprintf( "%.1f", $timeticks / 100 / 60 / 60 / 24 );

    my $temp;
    $temp = "Uptime: $uptime|days=$days";
    append($temp);

    if ( lc($uptime) =~ /seconds/ ) {
        $status = 1;
    }
    if ( lc($uptime) =~ /minute/ ) {
        $status = 1;
    }

    # Check previous uptime value if status is warning
    $just_rolled_over = 0;
    if ( $status != 0 ) {

        # Get previous uptime value
        readstatus();

        # If just_rolled_over flag set AND last uptime is less than current uptime
        if ( $just_rolled_over == 1 && $prev_uptime < $timeticks ) {
            $status = 0;
        }
        else {

            # If last uptime was close to the 32-bit limit (within 8 minutes)
            # 4294967296 - 48000 = 4294919296
            if ( $prev_uptime >= 4294919296 ) {
                $status           = 0;
                $just_rolled_over = 1;
            }
            else {
                $just_rolled_over = 0;
            }
        }
    }

    # cache uptime
    writestatus( $timeticks, $just_rolled_over );

}

sub append {
    my $appendstring = $_[0];
    $returnstring = "$returnstring$appendstring";
}

sub readstatus {
    $prev_uptime      = 0;
    $just_rolled_over = 0;

    if ( -e "$statusfile" ) {
        open my $statusfile_fh, "<$statusfile"
          or die "Can't open $statusfile: $!";
        $line = <$statusfile_fh>;

        ( $prev_uptime, $just_rolled_over ) = split( /,/, $line );
        close $statusfile_fh;
    }
}

sub writestatus {
    my ($cur_uptime)       = shift;
    my ($rolled_over_flag) = shift;

    open my $statusfile_fh, ">$statusfile" or die "Can't open $statusfile: $!";
    print $statusfile_fh "$cur_uptime,$rolled_over_flag\n";
    close $statusfile_fh;
}
