#!/usr/bin/perl
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use warnings;
use strict;
use FindBin qw($Bin);
use lib "/opt/opsview/perl/lib/perl5", "$Bin/../lib";
use Net::SNMP;
use Opsview::NagiosPlugin::SNMP;

my $np = Opsview::NagiosPlugin::SNMP->new(
    usage     => "Usage: %s",
    shortname => "CSS_MASTER",
    version   => "2.0",
    blurb     => "Checks whether CSS is master",
    snmp      => {
        "snmp-version" => "1",
        "snmp-timeout" => 2,
        "v1-fallback"  => 1,
    },
);

$np->getopts;

my $oid_sysDescr = ".1.3.6.1.2.1.1.1.0";

my $oid_HAStatus = ".1.3.6.1.4.1.9.9.368.1.9.8.3.1.4";

my $status       = 0;
my $returnstring = "";

my $s = $np->snmp;

$status = main();

# Close the session
$s->close();

if ( $returnstring eq "" ) {
    $status = 3;
}

print "$returnstring\n";

exit $status;

####################################################################
# This is where we gather data via SNMP and return results         #
####################################################################

# $oid_PrimaryStatusCode = ".1.3.6.1.4.1.9.9.147.1.2.1.1.1.3.6";
# $oid_SecondaryStatusCode = ".1.3.6.1.4.1.9.9.147.1.2.1.1.1.3.7";
# $oid_PrimaryStatusDescription = ".1.3.6.1.4.1.9.9.147.1.2.1.1.1.4.6";
# $oid_SecondaryStatusDescription = ".1.3.6.1.4.1.9.9.147.1.2.1.1.1.4.7";

sub main {

    my $PrimaryStatusCode          = 99;
    my $SecondaryStatusCode        = 99;
    my $PrimaryStatusDescription   = "";
    my $SecondaryStatusDescription = "";

    #
    # Gets HA status for device
    #
    if ( !defined( $s->get_next_request($oid_HAStatus) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }

    my $HAStatus;
    foreach ( $s->var_bind_names() ) {
        $HAStatus = $s->var_bind_list()->{$_};
    }

    my $translatedstatuscode = "";
    $translatedstatuscode = translatestatuscode($HAStatus);

    my $status = 0;

    if ( $HAStatus eq "4" ) {
        $returnstring = "Content Switch is master";
        $status       = 0;
    }
    elsif ( $HAStatus eq "1" ) {
        $returnstring =
          "Content Switch is not master. Status: $translatedstatuscode";
        $status = 1;
    }
    else {
        $returnstring =
          "Content Switch is not master. Status: $translatedstatuscode";
        $status = 2;
    }

    return ($status);

}

sub translatestatuscode {
    my $value        = $_[0];
    my $returnstring = "";

    if ( $value eq "1" ) {
        $returnstring = "no virtual router";
    }
    elsif ( $value eq "2" ) {
        $returnstring = "backup";
    }
    elsif ( $value eq "3" ) {
        $returnstring = "backup shared";
    }
    elsif ( $value eq "4" ) {
        $returnstring = "master";
    }
    else {
        $returnstring = "Unknown for value '$value'";
    }
    return ($returnstring);
}
