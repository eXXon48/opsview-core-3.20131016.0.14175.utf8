#!/usr/bin/perl
#
# AUTHORS:
#       Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

# From the Netscreen NSRP MIB:
# nsrpVsdMemberStatus OBJECT-TYPE
#   STATUS        current
#   DESCRIPTION
#       "0 Undefined
#        1 init
#        2 Master
#        3 Primary Backup
#        4 Backup
#        5 ineligible
#        6 inoperable"
#   ::= { nsrpVsdMemberEntry 3 }

use strict;
use warnings;

use FindBin qw($Bin);
use lib "/opt/opsview/perl/lib/perl5", "$Bin/../lib";
use Net::SNMP;
use Opsview::NagiosPlugin::SNMP;

my $np = Opsview::NagiosPlugin::SNMP->new(
    usage     => "Usage: %s",
    shortname => "check_snmp_netscreen_nrsp",
    version   => "0.2",
    blurb     => "Checks NSRP state on a Netscreen device (by IP)",
    snmp      => {
        "snmp-version" => 1,
        "snmp-timeout" => 2,
    },
);

$np->add_arg(
    spec => "warning|w=s",
    help => qq{-w, --warning=INTEGER
    Warning states - see NSRP states below,
                specify multiple states together, e.g.
                -w 234 for 2, 3, and 4.},
);

$np->add_arg(
    spec => "critical|c=s",
    help => qq{-c, --critical=INTEGER
    Critical states - see warning.},
);

$np->add_arg(
    spec => "group|g=s",
    help => qq{-g, --group=INTEGER
    NSRP group to check state for (integer)},
    required => 1,
);
$np->getopts;

my $warning  = $np->opts->warning;
my $critical = $np->opts->critical;
my $group    = $np->opts->group;

my @warning;
my @critical;

if ( $warning && $warning !~ /^[0-6]+$/ ) {
    print "Warning level is invalid, use -w [0-9]+ like -w 03456\n";
    usage();
    exit 3;
}
if ( $critical && $critical !~ /^[0-6]+$/ ) {
    print "Critical level is invalid, use -c [0-9]+ like -c 12\n";
    usage();
    exit 3;
}
if ($warning) {
    @warning = split( //, $warning );
}

if ($critical) {
    @critical = split( //, $critical );
}
my $s = $np->snmp;

my $oid_testoid =
  ".1.3.6.1.2.1.1.1.0"; # Used to check whether SNMP is responding
my $oid_nsrpstate =
  ".1.3.6.1.4.1.3224.6.2.2.1.3"; # Contains an entry for each NSRP VS

my $result;
my $retmsg;
my $retval;

my %states = (
    0, "Undefined",      1, "Init",   2, "Master",
    3, "Primary Backup", 4, "Backup", 5, "Ineligible",
    6, "Inoperable"
);

# Call this when you know you'll get a single value back
sub get_oid_value {
    our ( $oid, $status, $returnstring );

    $oid = shift(@_);

    if ( !defined( $s->get_request($oid) ) ) {
        if ( !defined( $s->get_request($oid_testoid) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return -1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return -1;
        }
    }

    foreach ( $s->var_bind_names() ) {
        $result = $s->var_bind_list()->{$_};
        if ( $_ !~ /^$oid/ ) {
            print "UNKNOWN - OID does not exist!\n";
            exit 3;
        }
    }

    return $result;
}

# returns 1 if the user has specified this to be a warning level
sub is_warning {
    return is_in( shift(@_), \@warning );
}

sub is_critical {
    return is_in( shift(@_), \@critical );
}

sub is_in {
    my $item;
    my $needle   = shift(@_);
    my $haystack = shift(@_);

    foreach $item (@$haystack) { return 1 if ( $item == $needle ) }

    return 0;
}

# Get NSRP status for specified group
$result = get_oid_value( "$oid_nsrpstate.$group" );

if ( $result eq -1 ) {
    print
      "UNKNOWN - Could not retrieve SNMP value, group $group might not exist?\n";
    exit 3;
}

# Work out if this is a warning, critical or neither
if ( is_critical($result) ) {
    $retmsg = "CRITICAL";
    $retval = 2;
}
elsif ( is_warning($result) ) {
    $retmsg = "WARNING";
    $retval = 1;
}
else {
    $retmsg = "OK";
    $retval = 0;
}

# Output text
$retmsg = "$retmsg - NSRP is $states{$result}($result) for group $group";

my $perfdata;

# Performance data
if ( $states{$result} eq "Master" ) {
    $perfdata = "ismaster=1";
}
else {
    $perfdata = "ismaster=0";
}

print "$retmsg | $perfdata\n";
exit $retval;
