#!/usr/bin/perl -w
### BEGIN OPSVIEW INFO
# Macros: SERVICEDESC
### END OPSVIEW INFO
# NOTE: macros used by plugin called
#
# SYNTAX:
# 	check_xxx
#
# DESCRIPTION:
# 	Checks xxx
#
# AUTHORS:
#    Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

use strict;
use warnings;

use lib '/usr/local/nagios/perl/lib';
use lib '/usr/local/nagios/lib';

use Nagios::Plugin;
use Opsview::Config;
use FindBin qw($Bin);

my $VERSION = '0.01';

my $np = Nagios::Plugin->new(
    usage     => qq{Usage: %s [-w <n>] [-c <n>]},
    shortname => 'XXX',
    version   => $VERSION,
    blurb     => q{Wrapper for check_mysql_performance on Opsview databases.

A wrapper is used so that database, username and password from
the Opsview configuration file can be used, rather than them being provided
as arguments to the check},
);

$np->add_arg(
    spec => 'debug=i',
    help => qq{--debug=<n>
   Enable debug output, use 0 to 5 (default: 0)},
    default => 0,
);

$np->add_arg(
    spec => 'database|d=s',
    help => qq{-d,--database=<name>
   Name of database to run check against (default: opsview)},
    default => 'opsview',
);

$np->add_arg(
    spec => 'perfdata=s',
    help => qq{--perfdata item1,item2,item3
   Performance data to output},
    default => 'Connections,Max_used_connections',
);

$np->getopts;

debug( 1, 'Setting debug level to ', $np->opts->debug );

debug( 1, 'Setting timeout to ', $np->opts->timeout );
alarm( $np->opts->timeout );

my ( $database, $username, $password ) = connection_info( $np->opts->database );
my $check    = 'check_mysql_performance';
my $perfdata = $np->opts->perfdata;

debug( 3, 'check=',    $check );
debug( 3, 'database=', $database );
debug( 3, 'username=', $username );
debug( 3, 'perfdata=', $perfdata );

my @command = (
    $Bin . '/' . $check, '-H', 'localhost', '-u',
    $username,           '-p', $password,   '--perfdata',
    $perfdata,
);
debug( 2, 'About to run: ', join( q{ }, @command ) );

exec(@command);

sub debug {
    my ( $level, @text ) = @_;
    if ( $level <= $np->opts->debug ) {
        warn @text, $/;
    }
}

sub connection_info {
    my ($db) = @_;
    my $prefix = $db eq "opsview" ? '' : $db . '_';

    debug( 3, 'database prefix = ', $prefix );

    my %dbinfo;
    for my $v (qw/ db dbuser dbpasswd /) {
        my $method = $prefix . $v;
        $dbinfo{$v} = Opsview::Config->$method;
    }

    return @dbinfo{ 'db', 'dbuser', 'dbpasswd' };
}
