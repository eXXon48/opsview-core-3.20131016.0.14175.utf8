#!/usr/bin/perl -w

#  Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#  W: http://www.opsview.com/
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use warnings;
use strict;
use FindBin qw($Bin $Script);
use lib "$Bin/../perl/lib";
use lib '/usr/local/nagios/perl/lib';
use lib '/usr/local/nagios/lib';
use List::Util qw(sum max min);
use Nagios::Plugin;
use Nagios::Plugin::Functions qw(max_state %STATUS_TEXT);

my $VERSION  = "1.0";
my $database = shift @ARGV;

my $np = Nagios::Plugin->new(
    shortname => uc( $database . '_USED' ),
    usage     => 'Usage: %s [-w warning] [-c critical] <database name>',
    version   => $VERSION,
    blurb     => 'Check for used tablespace in the specified Opsview '
      . 'database.',
);
$np->add_arg(
    spec => 'warning|w=s',
    help =>
      'Alert warning if used space is above this limit (default: 5 gigabytes)',
    default => 5,
);
$np->add_arg(
    spec => 'critical|c=s',
    help =>
      'Alert critical if used space is above this limit (default: 10 gigabytes)',
    default => 10,
);

$np->getopts;

$np->set_thresholds(
    warning  => $np->opts->warning,
    critical => $np->opts->critical
);

$np->nagios_exit(
    return_code => UNKNOWN,
    message     => 'No database specified',
) unless $database;

$np->nagios_exit(
    return_code => UNKNOWN,
    message     => 'No database specified',
) unless $database =~ /(?:opsview|runtime|odw|reports)/i;

$database = ucfirst($database);
eval "require $database";
if ($@) {
    $np->nagios_exit(
        return_code => UNKNOWN,
        message     => $@,
    );
}

my $dbh = $database->db_Main;
my $sth = $dbh->prepare( 'SHOW TABLE STATUS' );
$sth->execute;

my $total_used_space;
while ( my $row = $sth->fetchrow_hashref ) {
    my $space_used = ( $row->{data_length} + $row->{index_length} ) / 1024;
    $total_used_space += $space_used;
    my $state = $np->check_threshold( check => $space_used / 1024 / 1024 );
    if ( $state != OK ) {
        $np->add_message(
            $state,
            $row->{name} . ' -> '
              . to_2_decimal_points( $space_used / 1024 / 1024 )
              . ' gigabytes used',
        );
    }
}

$np->add_perfdata(
    label => 'total_used_space',
    value => $total_used_space,
    uom   => 'KB',
);

$np->nagios_exit( $np->check_messages, );

sub to_2_decimal_points {
    return sprintf( '%.2f', shift );
}
