#!/usr/bin/perl
#
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use warnings;
use strict;

use FindBin qw($Bin);
use lib "/opt/opsview/perl/lib/perl5", "$Bin/../lib";
use Net::SNMP;
use Opsview::NagiosPlugin::SNMP;

my $np = Opsview::NagiosPlugin::SNMP->new(
    usage     => "Usage: %s",
    shortname => "check_snmp_memutil",
    version   => "3.1",
    blurb     => "Returns memory utilisation stats for Linux / Unix systems",
    snmp      => {
        "snmp-version" => 1,
        "snmp-timeout" => 2,
    },
);

$np->add_arg(
    spec => "warning|w=s",
    help => qq{-w, --warning=INTEGER
    Real Memory warning threshold (as %)},
    default => 90,

);

$np->add_arg(
    spec => "critical|c=s",
    help => qq{-c, --critical=INTEGER
    Real Memory critical threshold (as %)},
    default => 95,
);

$np->add_arg(
    spec => "x=s",
    help => qq{-x=INTEGER
    Swap Memory warning threshold (as %)},
    default => 90,
);

$np->add_arg(
    spec => "d=s",
    help => qq{-d=INTEGER
    Swap Memory critical threshold (as %)},
    default => 95,
);

$np->getopts;

my $real_warning  = $np->opts->warning;
my $real_critical = $np->opts->critical;

my $swap_warning  = $np->opts->x;
my $swap_critical = $np->opts->d;

my $s = $np->snmp;

my $oid_sysDescr = ".1.3.6.1.2.1.1.1.0";
my $memTotalSwap = ".1.3.6.1.4.1.2021.4.3.0";
my $memTotalReal = ".1.3.6.1.4.1.2021.4.5.0";
my $memAvailSwap = ".1.3.6.1.4.1.2021.4.4.0";
my $memAvailReal = ".1.3.6.1.4.1.2021.4.6.0";

my $status       = 0;
my $returnstring = "";

main();

# Close the session
$s->close();

if ( $returnstring eq "" ) {
    $status = 3;
}

if ( $status == 0 ) {
    print "OK - $returnstring$/";
}
elsif ( $status == 1 ) {
    print "WARNING - $returnstring$/";
}
elsif ( $status == 2 ) {
    print "CRITICAL - $returnstring$/";
}
else {
    print "UNKNOWN - Plugin error?$/";
}

exit $status;

sub main {

    my $totalswap = 0;
    my $usedswap  = 0;
    my $totalreal = 0;
    my $availswap = 0;
    my $availreal = 0;

    # Swap
    if ( !defined( $s->get_request($memTotalSwap) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $totalswap = $s->var_bind_list()->{$_};
    }

    if ( !defined( $s->get_request($memAvailSwap) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $availswap = $s->var_bind_list()->{$_};
    }
    $usedswap = $totalswap - $availswap;
    my $usedswappercentage = ( 100 / $totalswap ) * $usedswap;
    my $usedswapmb         = $usedswap / 1024;

    # printf "Swap memory used: %.0f percent (%.0f Mb)$/", $usedswappercentage, $usedswapmb ;

    # Real
    if ( !defined( $s->get_request($memTotalReal) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $totalreal = $s->var_bind_list()->{$_};

        # $totalreal = sprintf("%.2f",$totalreal);
    }

    if ( !defined( $s->get_request($memAvailReal) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring = "SNMP OID does not exist";
            $status       = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $availreal = $s->var_bind_list()->{$_};

        # $availreal = sprintf("%.2f",$availreal);
    }
    my $usedreal           = $totalreal - $availreal;
    my $usedrealpercentage = ( 100 / $totalreal ) * $usedreal;
    my $usedrealmb         = $usedreal / 1024;

    my $totalmemused = $usedrealpercentage + $usedswappercentage;

    $returnstring
      .= sprintf "USAGE: Real %.0f%% (%.0f Mb), Swap %.0f%% (%.0f Mb) | ",
      $usedrealpercentage, $usedrealmb, $usedswappercentage, $usedswapmb;

    # Perf data
    $returnstring
      .= sprintf
      "used_real_pct=%.0f%% used_real_mb=%.0f used_swap_pct=%.0f%% used_swap_mb=%.0f",
      $usedrealpercentage, $usedrealmb, $usedswappercentage, $usedswapmb;

    if ( $usedrealpercentage >= $real_critical ) {
        $status = 2;
    }
    elsif ( $usedswappercentage >= $swap_critical ) {
        $status = 2;
    }
    elsif ( $usedrealpercentage >= $real_warning ) {
        $status = 1;
    }
    elsif ( $usedswappercentage >= $swap_warning ) {
        $status = 1;
    }
    else {
        $status = 0;
    }
}
