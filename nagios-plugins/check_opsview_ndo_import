#!/usr/bin/perl
#
#
# SYNTAX:
#	check_opsview_ndo_import
#
# DESCRIPTION:
#	On master server makes sure ndo import process is keeping up to date
#	by ensuring nothing is older than 60 seconds.  Also report stats.
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use strict;
use FindBin qw($Bin);
use lib "$Bin/../lib", "$Bin/../etc", "$Bin/../perl/lib";
use Nagios::Plugin;

my $VERSION = "0.01";

my $np = Nagios::Plugin->new(
    usage =>
      "Usage: %s [-v|--verbose] [-h|--help] [-w, --warning=<seconds>] [-c, --critical=<seconds>]\n   Checks data is being imported into NDO database",
    shortname => "NDO",
    version   => $VERSION,
);

$np->add_arg(
    spec => "warning|w=s",
    help => qq{-w, --warning=INTEGER
   Minimum and maximum number of allowable result, outside of which a
   warning will be generated (default: 30)},
    default => 30,
);

$np->add_arg(
    spec => "critical|c=s",
    help => qq{-c, --critical=INTEGER
   Minimum and maximum number of the generated result, outside of
   which a critical will be generated (default: 60) },
    default => 60,
);

$np->getopts;

alarm $np->opts->timeout;

my $rootdir    = "/usr/local/nagios";
my $import_dir = "$rootdir/var/ndologs";

if ( !-d $import_dir ) {
    $np->nagios_exit( CRITICAL, "ndologs directory does not exist" );
}

opendir( IMPORT, $import_dir );

# only interested in the oldest file
my $oldest_file_name;
my $oldest_file_age  = time();
my $total_file_count = 0;
my $ignored_files    = 0;

while ( my $file = readdir(IMPORT) ) {
    next if ( $file =~ m/^\.+$/ );
    next if ( $file =~ m/\.processing$/ );

    $total_file_count++;

    if ( $file =~ m/\.ignored$/ ) {
        $ignored_files++;
        next;
    }

    if ( ( stat( $import_dir . "/" . $file ) )[9] < $oldest_file_age ) {
        $oldest_file_age  = ( stat( $import_dir . "/" . $file ) )[9];
        $oldest_file_name = $file;
    }
}
closedir(IMPORT);

$oldest_file_age = time - $oldest_file_age;

$np->add_perfdata(
    label    => "last_import",
    uom      => "s",
    value    => $oldest_file_age,
    warning  => $np->opts->warning,
    critical => $np->opts->critical,
);

# log the number of backlogged files with a SWAG at warning/crit values
$np->add_perfdata(
    label    => "ndo_file_backlog",
    uom      => "",
    value    => $total_file_count,
    warning  => 1000,
    critical => 10000,
);

my $backlog_message = "$total_file_count ndo files backlogged";
if ($ignored_files) {
    $backlog_message
      .= " (of which $ignored_files ignored due to possible corruption)";
}
$np->nagios_exit(
    return_code => $np->check_threshold($oldest_file_age),
    message     => (
        $oldest_file_age
        ? "oldest ndo file is $oldest_file_age seconds old, $backlog_message"
        : $backlog_message
    ),
);
