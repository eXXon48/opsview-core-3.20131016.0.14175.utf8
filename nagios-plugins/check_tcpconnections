#!/usr/bin/perl

#  Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#  W: http://www.opsview.com/
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use Getopt::Std;
use IO::Socket;

$script         = "check_tcpconnections";
$script_version = "1.0";

my $tcpport    = "";
my $warning    = 9999;
my $critical   = 9999;
my $warnonzero = 0;
my $direction  = "in";

# Do we have enough information?
if ( @ARGV < 1 ) {
    print "Too few arguments\n";
    usage();
}

getopts( "hp:w:c:z:d:" );
if ($opt_h) {
    usage();
}
if ($opt_p) {
    $tcpport = $opt_p;
}
else {
    print "No TCP port specified\n";
    usage();
}
if ($opt_w) {
    $warning = $opt_w;
}
if ($opt_c) {
    $critical = $opt_c;
}
if ($opt_d) {
    if ( $opt_d eq "out" ) {
        $direction = "out";
    }
}
if ($opt_z) {
    if ( $opt_z > 0 ) {
        $warnonzero = 1;
    }
}

@netstat = `netstat -an`;

foreach $line (@netstat) {
    if ( $line =~ /$tcpport/ ) {
        if ( $line =~ /ESTABLISHED/ ) {

            # print "$line\n";
            $line =~ s/ESTABLISHED//g;
            $line =~ s/tcp//g;

            # $line =~ s/0      0//g;
            $line =~ s/^\s+//; # no leading whitespace
            $line =~ s/\s+$//; # no trailing whitespace

            $line =~ s/\.//g;

            $line =~ s/0      0//g;

            $line =~ /(\w+)/;
            $localip = $1;
            $line =~ s/$localip//g;

            $line =~ /(\w+)/;
            $localport = $1;
            $line =~ s/$localport//g;

            $line =~ s/^\s+//; # no leading whitespace
            $line =~ s/\s+$//; # no trailing whitespace

            $line =~ /(\w+)/;
            $remoteip = $1;
            $line =~ s/$remoteip//g;

            $line =~ /(\w+)/;
            $remoteport = $1;

            $line =~ s/$remoteport//g;

            $remoteport =~ s/ //g;

            if ( $direction eq "out" ) {
                if ( $remoteport eq $tcpport ) {
                    $counter++;
                }
            }
            else {
                if ( $localport eq $tcpport ) {
                    $counter++;
                }
            }
        }
    }
}

$direction = $direction . "bound";

if ( $counter > 0 ) {
    if ( $counter == 1 ) {
        print "TCP $tcpport: $counter $direction connection established\n";
    }
    else {
        print "TCP $tcpport: $counter $direction connections established\n";
    }
}
else {
    print "TCP $tcpport: no $direction connections!\n";
    if ( $warnonzero > 0 ) {
        exit 2;
    }
    exit 0;
}

if ( $counter > $critical ) {
    exit 2;
}
elsif ( $counter > $warning ) {
    exit 1;
}
exit 0;

sub usage {
    print << "USAGE";

$script v$script_version

Returns number of connections to given TCP port

Usage: $script -p <tcp port> -w <warning threshold> -c <critical threshold> -d in -z 1
Options: -p 		TCP port number
         -w 		Warning threshold (integer)
         -c 		Critical threshold (integer)
	 -d		Direction in (default) / out
         -z 1 		Warns if connections = 0 


USAGE
    exit 1;
}

# Blue Gremlins are an endangered species...
