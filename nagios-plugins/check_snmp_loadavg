#!/usr/bin/perl
#
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use warnings;
use strict;

use FindBin qw($Bin);
use lib "/opt/opsview/perl/lib/perl5", "$Bin/../lib";
use Net::SNMP;
use Opsview::NagiosPlugin::SNMP;
use Switch;

my $np = Opsview::NagiosPlugin::SNMP->new(
    usage     => "Usage: %s",
    shortname => "check_snmp_loadavg",
    version   => "2.1",
    blurb     => "Returns system load average for Linux / Unix systems",
    snmp      => {
        "snmp-version" => 1,
        "snmp-timeout" => 2,
    },
);

$np->add_arg(
    spec => "warning|w=s",
    help => qq{-w, --warning=INTEGER
   Minimum and maximum number of allowable result, outside of which a
   warning will be generated (default: 30)},
    default => 90,
);

$np->add_arg(
    spec => "critical|c=s",
    help => qq{-c, --critical=INTEGER
   Minimum and maximum number of the generated result, outside of
   which a critical will be generated (default: 60) },
    default => 95,
);

$np->add_arg(
    spec => "period|P=s",
    help => qq{-P, --period=INTEGER
    Load average check period (1: 1 Minute, 2: 5 Minutes, 3: 15 Minutes)},
    default => 1,
);

$np->getopts;

my $warning       = $np->opts->warning;
my $critical      = $np->opts->critical;
my $laLoad        = 0;
my $ladescription = "";

my $oid_sysDescr = ".1.3.6.1.2.1.1.1.0";
my $laLoad1      = ".1.3.6.1.4.1.2021.10.1.3.1";
my $laLoad2      = ".1.3.6.1.4.1.2021.10.1.3.2";
my $laLoad3      = ".1.3.6.1.4.1.2021.10.1.3.3";

switch ( $np->opts->period ) {
    case 1 { $laLoad = $laLoad1; $ladescription = "1 Min avg"; }
    case 2 { $laLoad = $laLoad2; $ladescription = "5 Min avg"; }
    case 3 { $laLoad = $laLoad3; $ladescription = "15 Min avg"; }
    else   { $laLoad = $laLoad2; $ladescription = "5 Min avg"; }
}

my $returnstring = "";
my $status       = 0;

my $s = $np->snmp;

main();

# Close the session
$s->close();

if ( $returnstring eq "" ) {
    $status = 3;
}

if ( $status == 0 ) {
    print "Status is OK - $returnstring\n";

    # print "$returnstring\n";
}
elsif ( $status == 1 ) {
    print "Status is a WARNING level - $returnstring\n";
}
elsif ( $status == 2 ) {
    print "Status is CRITICAL - $returnstring\n";
}
else {
    print "Status is UNKNOWN\n";
}

exit $status;

sub main {

    my $cpuavg = 0;
    my $temp   = "";

    if ( !defined( $s->get_request($laLoad) ) ) {
        if ( !defined( $s->get_request($oid_sysDescr) ) ) {
            $returnstring = "SNMP agent not responding";
            $status       = 1;
            return 1;
        }
        else {
            $returnstring =
              "SNMP OID does not exist. Is this device a Linux / Unix server?";
            $status = 1;
            return 1;
        }
    }
    foreach ( $s->var_bind_names() ) {
        $cpuavg = $s->var_bind_list()->{$_};
    }

    $temp = sprintf "Load %.2f ($ladescription) | ", $cpuavg;
    append($temp);

    # Perf data
    $returnstring .= sprintf "Load_average=%.2f", $cpuavg;

    if ( $cpuavg >= $warning ) {
        $status = 1;
    }
    if ( $cpuavg >= $critical ) {
        $status = 2;
    }
}

sub append {
    my $appendstring = $_[0];
    $returnstring = "$returnstring$appendstring";
}

