#!/usr/bin/perl
#
#
# SYNTAX:
# 	import_json
#
# DESCRIPTION:
#   Reads stdin, expecting data of the format:
#   [ {
#       url => "...",
#       method => "...",
#       data => {...}
#     },
#     ...
#   ]
#   Will then send the data, using the appropriate URL and method to Opsview's REST API
#
# AUTHORS:
#	Copyright (C) 2003-2013 Opsview Limited. All rights reserved
#
#    This file is part of Opsview
#
#    Opsview is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    Opsview is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with Opsview; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

use strict;
use FindBin qw($Bin);
use lib "$Bin", "$Bin/../lib", "$Bin/../etc", "$Bin/../perl/lib";

use Getopt::Long;
use Opsview::API;
use JSON::Any;
use Data::Dump qw(dump);

my $url_prefix = $ENV{OPSVIEW_URL_PREFIX} || "http://localhost";
my $username;
my $password;

GetOptions(
    "username|u=s" => \$username,
    "password|p=s" => \$password,
) or my_die( "Incorrect options" );

my $j = JSON::Any->new;

my $ua = Opsview::API->new(
    username        => $username,
    password        => $password,
    url_prefix      => $url_prefix,
    api_min_version => "2",
    data_format     => "json",
);

$ua->login;

my $input;
{
    $/     = undef;
    $input = <>;
}

my $imports = $j->decode($input);
foreach my $section (@$imports) {
    my $url    = $section->{url}    || my_die( "No URL found" );
    my $method = $section->{method} || my_die( "No method found" );
    $method = lc($method);

    my $data = $j->encode( $section->{data} );

    print "Importing using $method to $url\n";

    $ua->$method( $url, $data );
}

sub my_die {
    print <<"USAGE";

import_json --username=user --password=password importfile

Reads importfile, which is expected to be a JSON file, and applies
each step within via the Opsview REST API

See utils/export_host_template for an example file that can be read
USAGE

    die(@_);
}
