#!/usr/bin/perl
#
# $Id$
#

# NOTES:
#
# "perldoc perlpod" for more info on using POD
# "perldoc Getopt::Long" for more info on using command line options
#   and imposing limits on what can be used with which switches
# Any $<text>$ is a CVS/SVN keyword - do not alter!
# When script is complete, use "perltidy -b -i=2 <script>" to format correctly

# all "use" statements
use strict;   # ALWAYS USE! Helps to catch bugs and problems much faster
use warnings; # ALWAYS USE! Helps to catch bugs and problems much faster

use lib "/usr/local/nagios/lib", "/usr/local/nagios/perl/lib",
  "/usr/local/nagios/etc";

# find the path to the script directory and the script name
use Cwd;
my ( $script, $scriptname, $scriptdir );
$script = Cwd::abs_path($0);
( $scriptname = $script ) =~ s!^.*/!!;
( $scriptdir  = $script ) =~ s!$scriptname$!!;

# Pull in functions to use inline POD as output for help options
use Pod::Usage;

# Pull in functions to parse the command line options
# Configure command line options to be case sensitive, and allow
# -v -a -x as -vax (different to --vax).  Long options must also use --'s
# Also stop long options being abreviated to uniqueness
use Getopt::Long qw(:config no_ignore_case bundling no_auto_abbrev);

# Version information, as from CVS
my $_VERS = sprintf( "%d.%d", q$Revision: 0.01 $ =~ m!(\d+)\.(\d+)! );
my $_DATE = sprintf( "%s %s",
    q$Date: 2000/01/01 00:00:00 $ =~ m!(\d.../\d./\d.) (\d.:\d.:\d.)! );

my $VERSION = "$_VERS $_DATE"; # Combined for script version (-V output)

# Start of POD (Perl Online Documentation)
#   Use "perldoc <script>" or "<script> --help" to read POD

use Runtime;
use Data::Dump qw(dump);

=head1 NAME

gather_config_info

=head1 SYNOPSIS

S< gather_config_info [-?hV] >

=head1 DESCRIPTION

Gather config information for stress scripts from the runtime database. Output
to STDOUT so can be redirected as necessary.

=head1 OPTIONS

=over

=cut

#### Set up default options available for all scripts,
# i.e. "<script> --version" or "<script> --help"
# All command line options are stored within a hash for easy access
# This initialises hash and defines some entries in one go
# See "perldoc perldata" for more info
my %options = (
    'help|h|?'  => 0,
    'man'       => 0,
    'version|V' => 0,
    'debug:+'   => 0,
);

#### Document default options

=item --help, -?, -h

Display basic help 

=item --man

Display man page

=item --debug [0-9], --debug [--debug [...]]

Enable debugging mode (using more than once increases verbosity, or specify
a level explicitly to a maximum of level 8) 

=item --version, -V

Show version information

=cut

#### Addition options, documented as necessary
#$options{'additional|a'} = "";
#
#=item --additional, -a
#
#Additional option
#
#=cut

#### End of options

=back

=head1 ARGUMENTS

=over

=item N/A

=back

=cut

#### start of perl code ####

# Getopt::Long can limit/expand on how switches are used.  This step
# normalises the options hash to remove optional specifiers used by
# Getopts::Long.  Show usage (from the inline POD) if any options unrecognised
GetOptions( \%options, keys(%options) ) || pod2usage( -verbose => 1 );

# output version and exit
# i.e. "<script> --version" or "<script> -v"
die("Version: $VERSION\n") if ( $options{version} );

# output basic help text when -?, --help or -h used
pod2usage( -verbose => 1 ) if ( $options{'?'} || $options{help} );

#output complete help text when -m|--man|-H|--HELP used
pod2usage( -verbose => 2 ) if ( $options{HELP} || $options{man} );

#### global variables ####
# Initialise debug variable correctly if not already set by --debug
$options{debug} ||= 0;

# Set an arbitrary max level of 8 for debug
$options{debug} = 8 if ( $options{debug} > 8 );

my $dbh = Runtime->db_Main;
my $sql;
my $sth;

# set up some default information for some checks, such as performance info
my %data = (
    check_tcp => {
        perfdata => {
            output => [qw/ 1 0 0 0 10 /],
            format => "time=%.6fs;%.6f;%.6f;%.6f;%.6f",
        },
    },

    check_icmp => {
        perfdata => {
            output => [qw/ 1 -200 -500 100 -40 -80 /],
            format => "rta=%.3fms;%.3f;%.3f;0 pl=%d%%;%d;%d;; ",
        },
    },

    check_snmp_tcpcurrestab => {},

    check_snmp_interfaces => {},

    check_snmp_linkstatus => {},

    check_snmp_interfaces => {},
);

#### all sub-routines ####

# description:
#   given a level and a message, if level <= debug level, output message
#   Allows for progressivly more output the higher the debug level, as
#   given by the use of --debug. Saves on "expensive" 3rd party module
# parameters:
#   $1 = level --> level (to match debug level)
#   $2 .. $n   --> list to pass to print
# returns:
#   nothing
sub logmsg($@) {
    print @_, $/ if ( shift() <= $options{debug} );
}

#### main ####

# NOTE: use STD and not MAX otherwise the returned figure will always
# be when service check times out, not a realistic value for working checks
$sql = "
SELECT 
	command_line cmd, 
	MIN(execution_time) min, 
	STD(execution_time) max
FROM nagios_servicechecks
GROUP BY command_line
";

$sth = $dbh->prepare($sql) || die( "Error: ", $dbh->error_str, $/ );
$sth->execute || die( "Error: ", $dbh->error_str, $/ );

while ( my $row = $sth->fetchrow_hashref() ) {
    my $cmd = $row->{cmd};
    next unless ($cmd);
    $cmd =~ s/\s+.*//;
    $cmd =~ s!.*/!!;

    if ( $data{$cmd}{response}{low} ) {
        $data{$cmd}{response}{low} =
          ( $data{$cmd}{response}{low} + $row->{min} ) / 2;
    }
    else {
        $data{$cmd}{response}{low} = $row->{min};
    }

    if ( $data{$cmd}{response}{high} ) {
        $data{$cmd}{response}{high} =
          ( $data{$cmd}{response}{high} + $row->{max} ) / 2;
    }
    else {
        $data{$cmd}{response}{high} = $row->{max};
    }
}

$sql = "
SELECT command_line cmd, COUNT(1) count, return_code rc
FROM nagios_servicechecks 
GROUP BY command_line, return_code
";

$sth = $dbh->prepare($sql) || die( $dbh->errstr, $/ );
$sth->execute || die( $dbh->errstr, $/ );

while ( my $row = $sth->fetchrow_hashref() ) {
    my $cmd = $row->{cmd};
    next unless ($cmd);
    $cmd =~ s/\s+.*//;
    $cmd =~ s!.*/!!;

    my $type = "";

    SWITCH: foreach ( $row->{rc} ) {
        /^0$/ && do {
            $type = "OK";
            last SWITCH;
        };
        /^1$/ && do {
            $type = "WARNING";
            last SWITCH;
        };
        /^2$/ && do {
            $type = "CRITICAL";
            last SWITCH;
        };
        /^3$/ && do {
            $type = "UNKNOWN";
            last SWITCH;
        };
    }

    next if ( !$type );

    $data{$cmd}{result}{total} += $row->{count};

    #print "cmd total:", $data{$cmd}{result}{total},$/;
    $data{$cmd}{result}{$type} += $row->{count};
}

foreach my $cmd ( keys(%data) ) {
    foreach my $type ( keys( %{ $data{$cmd}{result} } ) ) {
        next if ( $type eq "total" );

        #print "type=$type, total=",$data{$cmd}{result}{total}, " res=",$data{$cmd}{result}{$type},$/;

        $data{$cmd}{result}{$type} =
          ( $data{$cmd}{result}{$type} / $data{$cmd}{result}{total} ) * 100;
    }
}

print dump( \%data ), $/;

__END__
# Remaining POD for man page/help text

=head1 NOTES

Any further notes on running this code, its use, where it came from or who's
bad idea it was.

=head1 FILES

Any (optional?) files referenced or used by the script

=head1 AUTHOR AND COPYRIGHT

Copyright (C) 2003-2013 Opsview Limited. All rights reserved

This is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This software is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Opsview; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

=back

=head1 KNOWN BUGS

Any known issues

=head1 SEE ALSO

L<perl>

=cut
